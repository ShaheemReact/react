{"ast":null,"code":"var _jsxFileName = \"/home/cybro-shaheem/Desktop/project/Routes-React/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { defer, json, useLoaderData, Await } from \"react-router-dom\";\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //   return {isError:true,message:\"could not fetch events\"};\n    // throw new Response(JSON.stringify({message:\"could not fetch events\"}),{status:500})\n    //     } \n    // else{        \n\n    return json({\n      message: \"could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nfunction loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nexport { loader };\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["defer","json","useLoaderData","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","resolve","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/home/cybro-shaheem/Desktop/project/Routes-React/frontend/src/pages/Events.js"],"sourcesContent":["import {defer, json, useLoaderData,Await} from\"react-router-dom\";\nimport EventsList from '../components/EventsList';\nfunction EventsPage() {\n    const data = useLoaderData();\n    return <Await resolve={events }></Await>\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n      const response = await fetch('http://localhost:8080/events');\n    if (!response.ok) {\n    //   return {isError:true,message:\"could not fetch events\"};\n    // throw new Response(JSON.stringify({message:\"could not fetch events\"}),{status:500})\n    //     } \n    // else{        \n\n      return json({message:\"could not fetch events\"},{status:500})\n    }\n    else{\n      return response\n    }\n}\n function loader(){\n  defer({\n    events:loadEvents()\n  })\n  }\nexport {loader} "],"mappings":";;AAAA,SAAQA,KAAK,EAAEC,IAAI,EAAEC,aAAa,EAACC,KAAK,QAAM,kBAAkB;AAChE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAC5B,oBAAOI,OAAA,CAACH,KAAK;IAACO,OAAO,EAAEC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAC5C;AAACP,EAAA,CAHQD,UAAU;EAAA,QACFL,aAAa;AAAA;AAAAc,EAAA,GADrBT,UAAU;AAKnB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAE;EACrB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAClB;IACA;IACA;IACA;;IAEE,OAAOnB,IAAI,CAAC;MAACoB,OAAO,EAAC;IAAwB,CAAC,EAAC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAC9D,CAAC,MACG;IACF,OAAOJ,QAAQ;EACjB;AACJ;AACC,SAASK,MAAMA,CAAA,EAAE;EAChBvB,KAAK,CAAC;IACJW,MAAM,EAACM,UAAU,CAAC;EACpB,CAAC,CAAC;AACF;AACF,SAAQM,MAAM;AAAC,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}